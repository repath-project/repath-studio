(ns renderer.element.hierarchy)

;; REVIEW: Is this type of complexity really needed?
(derive ::graphics ::renderable)
(derive ::gradient ::renderable)
(derive ::descriptive ::renderable)
(derive :foreignObject ::graphics)
(derive :textPath ::graphics)
(derive :tspan ::graphics)
(derive :linearGradient ::gradient)
(derive :radialGradient ::gradient)
(derive :desc ::descriptive)
(derive :metadata ::descriptive)
(derive :title ::descriptive)

(defmulti render "Renders the element to dom." :tag)
(defmulti render-to-string "Returns an SVG string of the element." :tag)
(defmulti path "Converts the elemnt to path commands (d)." :tag)
(defmulti area "Calculates the area enclosed by the shape." :tag)
(defmulti centroid "Returns the elements' center of mass." :tag)
(defmulti snapping-points "Returns additional snapping point for the element." :tag)
(defmulti render-edit "Renders the edit overlay of the element." :tag)
(defmulti bounds "Returns the local bounds of the element." :tag)
(defmulti translate "Translates the element by a given offset." (fn [el _offset] (:tag el)))
(defmulti scale "Scales the element by a given ratio and pivot-point." (fn [el _ration _pivot-point] (:tag el)))
(defmulti edit "Edits the element by a given offset and handle." (fn [el _offset _handle] (:tag el)))
(defmulti properties "Returns the properties of the element." keyword)

(defmethod render :default [])
(defmethod render-to-string :default [element] [render element])
(defmethod render-edit :default [])
(defmethod bounds :default [])
(defmethod area :default [])
(defmethod centroid :default [])
(defmethod snapping-points :default [])
(defmethod scale :default [element] element)
(defmethod translate :default [element] element)
(defmethod edit :default [element] element)
(defmethod properties :default [])

