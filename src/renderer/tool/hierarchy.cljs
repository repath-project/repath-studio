(ns renderer.tool.hierarchy)

(defmulti pointer-down (fn [db _e] (:tool db)))
(defmulti pointer-move (fn [db _e] (:tool db)))
(defmulti pointer-up (fn [db _e] (:tool db)))
(defmulti double-click (fn [db _e] (:tool db)))
(defmulti drag (fn [db _e _t] (:tool db)))
(defmulti drag-start (fn [db _e] (:tool db)))
(defmulti drag-end (fn [db _e] (:tool db)))
(defmulti key-up (fn [db _e] (:tool db)))
(defmulti key-down (fn [db _e] (:tool db)))
(defmulti snapping-bases (fn [db _e] (:tool db)))
(defmulti snapping-points (fn [db _e] (:tool db)))
(defmulti activate :tool)
(defmulti deactivate :tool)
(defmulti render identity)
(defmulti properties "Returns the properties of the tool." identity)
(defmulti help "Returns the status bar help text." (fn [tool state] [tool state]))

(defmulti right-panel identity)

(defmethod pointer-down :default [db _e] db)
(defmethod pointer-up :default [db _e] db)
(defmethod pointer-move :default [db _e] db)
(defmethod drag-start :default [db _e] db)
(defmethod double-click :default [db _e] db)
(defmethod key-up :default [db _e] db)
(defmethod key-down :default [db _e] db)
(defmethod drag :default [db e] (pointer-move db e))
(defmethod drag-end :default [db e] (pointer-up db e))
(defmethod activate :default [db] db)
(defmethod deactivate :default [db] db)
(defmethod render :default [])
(defmethod properties :default [])
(defmethod snapping-bases :default [])
(defmethod snapping-points :default [])
(defmethod help :default [_tool _state] "")


